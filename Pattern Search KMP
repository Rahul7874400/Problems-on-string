
// C++ program for implementation of KMP pattern searching 
// algorithm 
#include <bits/stdc++.h> 

using namespace std;

//Function to fill lps[] for given patttern pat[0..M-1].
void computeLPSArray(string pat, int M, int* lps) 
{ 
    lps[0] = 0;
    
    for(int i=1;i<M;i++)
    {
        int len = lps[i-1];
        
        while(len>0 && pat[len]!=pat[i])
        len = lps[len-1];
        
        if(pat[len]==pat[i])
        len++;
        
        lps[i] = len;
    }
} 

//Function to check if the pattern exists in the string or not.
bool KMPSearch(string pat, string txt) 
{
    int m = pat.length();
    int n = txt.length();
    int lps[m];
    computeLPSArray(pat,m,lps);
    
     int i=0,j=0;
    while(i<n)
    {
        if(pat[j]==txt[i])
        {
            i++;
            j++;
        }
        if(j==m)
        return true;
        
       else if(i<n && pat[j]!=txt[i])
        {
            if(j==0)
            i++;
            else
            j = lps[j-1];
        }
    }
    return false;
}

int main() 
{ 
    int t;
    std::cin >> t;
    
    while(t--){
        string s, pat;
        cin >> s >> pat;
        if(KMPSearch(pat, s)){
            cout << "Yes" << endl;
        }
        else cout << "No" << endl;
    }
    
	return 0;
} 
