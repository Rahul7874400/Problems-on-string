/* Following program is a C implementation of 
Rabin Karp. Algorithm. */
#include<bits/stdc++.h>

using namespace std;

bool search(string, string, int);

// d is the number of characters in the input alphabet 
#define d 256 

//Function to check if the pattern is present in string or not.
bool search(string pat, string txt, int q) 
{ 
    // computing d^m-1.where m is lenght of pattern.
    int h = 1;
    for(int i=0;i<pat.length()-1;i++)
    h = (h*d)%q;
    
    int p=0,t=0;
    
    // computing the window value of pattern and text.
    for(int i=0;i<pat.length();i++)
    {
        p = (p*d+pat[i])%q;
        t = (t*d+txt[i])%q;
    }
    int n = txt.length()-pat.length();
    for(int i=0;i<=n;i++)
    {
        // if window value of text and pattern mateched then go check for pattern is present 
        // or not.
        if(p==t)
        {
            int j;
            for(j=0;j<pat.length();j++)
            if(pat[j]!=txt[i+j])
            break;
            
            // if j is equal to pattern length then pattern is present in text.
            if(j==pat.length())
            return true;
        }
        
        else
        {
            // computing next window of text for comparision.
            t = (d*(t-txt[i]*h)+txt[i+pat.length()])%q;
            if(t<0)
            t = t+q;
        }
    }
    
    return false;
} 

int main() 
{ 
    int t;
    cin >> t;
    
    while(t--){
	    string s, p;
	    cin >> s >> p;
	    int q = 101; // A prime number 
	    if(search(p, s, q)) cout << "Yes" << endl;
	    else cout << "No" << endl;
    }
	return 0; 
}
